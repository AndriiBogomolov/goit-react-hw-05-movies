{"version":3,"file":"static/js/134.b7534985.chunk.js","mappings":"wMAGaA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,eAAIC,UAAU,cAAd,SACGH,EAAOI,KAAI,SAAAC,GAAK,OACf,eAAmBF,UAAU,aAA7B,UACE,SAAC,KAAD,CACEG,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CACLC,KAAMR,GAHV,SAMGI,EAAMK,OAASL,EAAMM,QAPjBN,EAAME,GADA,KActB,C,uJC8CD,UA5De,WACb,OAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAee,EAAf,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACA,GAA0BL,EAAAA,EAAAA,UAAS,IAAnC,eAAOM,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,UAErCC,EAAAA,EAAAA,YAAU,WACHF,IAGL,iBAAC,6FACCN,GAAa,GADd,mBAG6BS,EAAAA,EAAAA,IAAkBH,GAH/C,gBAGWI,EAHX,EAGWA,QACRZ,EAAUY,GAJb,gDAMGR,EAAS,EAAD,IANX,yBAQGL,EAASS,GACTN,GAAa,GAThB,2EAAD,EAYD,GAAE,CAACM,IAgBJ,OACE,4BACE,kBAAMK,SAZW,SAAAC,GACnBA,EAAEC,iBACFR,EAAgB,CAAET,MAAAA,IACG,KAAjBA,EAAMkB,OAIVF,EAAEG,OAAOC,QAHPC,IAAAA,OAAAA,QAAwB,4BAI3B,EAIiC/B,UAAU,OAAxC,WACE,kBACEgC,KAAK,OACLC,MAAOvB,EACPwB,SApBa,SAAC,GAA2B,IAAfD,EAAc,EAAxBJ,OAAUI,MAChCtB,EAASsB,EAAML,OAChB,EAmBOO,YAAY,YAEd,mBAAQH,KAAK,SAAShC,UAAU,eAAhC,uBAIiB,IAAlBH,EAAOuC,SAAgB,SAAC,IAAD,CAAYvC,OAAQA,IAC3CgB,IAAa,SAAC,IAAD,IACbE,IAAS,sEAGf,C,mMC/DDsB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAEFC,EAAa,mCAAG,yGAAOC,EAAP,6DACRH,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAAkCF,IAD1B,cACrBG,EADqB,yBAEpBA,EAAKC,MAFe,2CAAH,qDAKbnB,EAAiB,mCAAG,WAAMb,GAAN,uFACZ2B,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsC5B,EADtC,gCADY,cACzB+B,EADyB,yBAIxBA,EAAKC,MAJmB,2CAAH,sDAOjBC,EAAkB,mCAAG,WAAOvC,GAAP,4FAAWwC,EAAX,+BAA4B,GAA5B,SACbP,EAAAA,EAAAA,IAAA,gBACRjC,GADQ,OACHwC,EADG,oBACuBN,EADvB,oBADa,cAC1BG,EAD0B,yBAIzBA,EAAKC,MAJoB,2CAAH,sDAOlBG,EAAa,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,gBACRS,EADQ,4BACmBR,EADnB,oBADQ,cACrBG,EADqB,yBAIpBA,EAAKC,KAAKK,MAJU,2CAAH,sDAObC,EAAgB,mCAAG,WAAMF,GAAN,uFACXT,EAAAA,EAAAA,IAAA,gBACRS,EADQ,4BACmBR,EADnB,oBADW,cACxBG,EADwB,yBAIvBA,EAAKC,KAAKlB,SAJa,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","pages/Movies.jsx","services/apiService.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\nimport propTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul className=\"render_List\">\n      {movies.map(movie => (\n        <li key={movie.id} className=\"renderCard\">\n          <NavLink\n            to={`/movies/${movie.id}`}\n            state={{\n              from: location,\n            }}\n          >\n            {movie.title || movie.name}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number.isRequired,\n      title: propTypes.string,\n      name: propTypes.string,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieByQuery } from '../services/apiService';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    (async () => {\n      setIsLoading(true);\n      try {\n        const { results } = await fetchMovieByQuery(searchQuery);\n        setMovies(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setQuery(searchQuery);\n        setIsLoading(false);\n      }\n    })();\n  }, [searchQuery]);\n\n  const handleChange = ({ target: { value } }) => {\n    setQuery(value.trim());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query });\n    if (query.trim() === '') {\n      Notiflix.Notify.failure('Please, enter your query.');\n      return;\n    }\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={handleChange}\n          placeholder=\"Search\"\n        />\n        <button type=\"submit\" className=\"input_button\">\n          Search\n        </button>\n      </form>\n      {movies.length !== 0 && <MoviesList movies={movies} />}\n      {isLoading && <Loader />}\n      {error && <p>Please wait, something is going wrong...</p>}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '511459bb76b455592e33aca5ec0b21c6';\n\nexport const fetchDayTrend = async (endpoints = `trending/movie/day`) => {\n  const resp = await axios.get(`${endpoints}?api_key=${apiKey}`);\n  return resp.data;\n};\n\nexport const fetchMovieByQuery = async query => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return resp.data;\n};\n\nexport const fetchMovieDetsById = async (id, detailEndpoint = '') => {\n  const resp = await axios.get(\n    `movie/${id}${detailEndpoint}?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data;\n};\n\nexport const fetchCastInfo = async movieId => {\n  const resp = await axios.get(\n    `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data.cast;\n};\n\nexport const fetchReviewsInfo = async movieId => {\n  const resp = await axios.get(\n    `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data.results;\n};\n"],"names":["MoviesList","movies","location","useLocation","className","map","movie","to","id","state","from","title","name","useState","query","setQuery","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","fetchMovieByQuery","results","onSubmit","e","preventDefault","trim","target","reset","Notiflix","type","value","onChange","placeholder","length","axios","apiKey","fetchDayTrend","endpoints","resp","data","fetchMovieDetsById","detailEndpoint","fetchCastInfo","movieId","cast","fetchReviewsInfo"],"sourceRoot":""}